- Detect "as" imports and use information in the graph
  -> Is easy when the ast can be used, don't do this for
     bytecode scanner.
  -> This needs a number of tests as well (including test
     for from imports:
       - a: "from b import c", b: "import sys as c" [with correct link]
       - a: "from b import c", b: "from sys import path as c" [no link to 'c']
       - a: "from b import c", b: "from package import submod as c" [with correct link]

- Add support for setuptools style namespace packages
  (T.B.D. if this needs an extension hook)
  [This may not need work at all, importlib code works different
  than the older code, and we may not need special code at all
  other than peeking at the package search path]

  -> Need tests

- Add support for virtual environments (venv and virtualenv)
  [Tests for both, likely special support for virtualenv]

  -> Need tests

- Investigate if is is possible to use importlib with an alterate
  path (and sys.modules!).

  Otherwise provide usefull context manager(s):

     with saved_sys_path():
         ...

     Runs '...' then restores importlib/sys.path to the state
     before the with block (and flush caches).

- Add method "add_distribution(dist: Union[str, PyPIDistribution]) -> PyPIDistribution

  This adds a node for the distribution, with links to all importable names
  in that distribution. The distribution is added as a graph root.

  A problem with this is that PyPIDistribution is not a BaseNode, which
  complicates mypy annotations (but probably not too much)

- Write documentation:
  - Write reference docs (look into generating these from docstrings)
  - Add examples

- Check naming and adjust for readability
