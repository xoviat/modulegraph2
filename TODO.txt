- Try to get rid of delayed caller, should be possible:

  - Remember length of work stack before calling _import_module
  - Call import_module
  - Insert call to process_names at 'length' (e.g. just before
    everything added by import_module).
  - This should ensure that process_names is called after the
    recursion is done.

- Detect "as" imports and use information in the graph
  -> Is easy when the ast can be used, don't do this for
     bytecode scanner.
  -> This needs a number of tests as well (including test
     for from imports:
       - a: "from b import c", b: "import sys as c" [with correct link]
       - a: "from b import c", b: "from sys import path as c" [no link to 'c']
       - a: "from b import c", b: "from package import submod as c" [with correct link]

- Add support for virtual environments (venv and virtualenv)
  [Tests for both, likely special support for virtualenv]

  -> Need tests (which need to use subprocesses), what can be tested?
     Venv should work fine, for virtualenv need to check for special
     files (os.py, distutils), verify that the dependencies are correct
     (and reflect the files outside of the virtual environment)

- Add method "add_distribution(dist: Union[str, PyPIDistribution]) -> PyPIDistribution

  This adds a node for the distribution, with links to all importable names
  in that distribution. The distribution is added as a graph root.

  A problem with this is that PyPIDistribution is not a BaseNode, which
  complicates mypy annotations (but probably not too much)

- Write documentation:
  - Write reference docs (look into generating these from docstrings)
  - Add examples

- Test modules contain duplicated support code, moves that code
  to testsuite.util (test support mix-in)

- Check naming and adjust for readability
